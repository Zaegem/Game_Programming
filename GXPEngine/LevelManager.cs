using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;

namespace GXPEngine
{
    public enum LevelType
    {
        Menu,
        Level1,
        Level2,
        Level3
    }

    public struct LevelData
    {
        public int[,] level;
        public int[] walkableBlocks;
        public Vec2 playerSpawnPosition;
        public Vec2[] plantSpawnPositions;
        public Vec2[] trunkSpawnPositions;
    }

    class LevelManager : GameObject
    {
        private int[,] level1 = new int[,]
        {
            { 157, 158, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, },
            { 157, 158, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6 },
            { 157, 158, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6 },
            { 157, 158, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6 },
            { 157, 158, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6 },
            { 157, 158, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6 },
            { 157, 158, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6 },
            { 157, 158, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6 },
            { 157, 158, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6 },
            { 157, 158, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6 },
            { 157, 158, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6 },
            { 157, 158, 11, 12, 13, 14, 15, 11, 12, 13, 14, 15, 11, 12, 13, 14, 15, 11, 12, 13, 14, 15, 11, 12, 13, 14, 15, 11, 12, 13, 14, 15, 11, 12, 13, 14, 15, 11, 12, 13, 14, 15, 11, 12, 16 },
            { 157, 158, 21, 22, 43, 44, 65, 21, 22, 43, 44, 65, 21, 22, 43, 44, 65, 21, 22, 43, 44, 65, 21, 22, 43, 44, 65, 21, 22, 43, 44, 65, 21, 22, 43, 44, 65, 21, 22, 43, 44, 65, 21, 22, 66 },
            { 157, 157, 47, 47, 47, 47, 48, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 176 },
            { 157, 157, 157, 157, 157, 157, 157, 48, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 176 },
            { 157, 157, 157, 157, 157, 157, 157, 158, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 46, 47, 47, 47, 47, 48, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 176 },
            { 157, 157, 157, 157, 157, 157, 157, 158, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 156, 157, 157, 157, 157, 158, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 176 },
            { 157, 157, 157, 157, 157, 157, 157, 158, 131, 131, 131, 131, 131, 46, 47, 48, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 156, 157, 157, 157, 157, 158, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 176 },
            { 157, 157, 157, 157, 157, 157, 157, 157, 48, 131, 131, 131, 131, 156, 157, 158, 131, 131, 131, 131, 131, 131, 131, 131, 131, 46, 157, 157, 157, 157, 157, 158, 131, 131, 131, 131, 131, 131, 46, 47, 48, 131, 131, 131, 176 },
            { 157, 157, 157, 157, 157, 157, 157, 157, 157, 47, 47, 47, 47, 157, 157, 157, 47, 47, 47, 47, 47, 47, 47, 47, 47, 157, 157, 157, 157, 157, 157, 157, 47, 47, 47, 47, 47, 47, 157, 157, 157, 47, 47, 47, 47 },
            { 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 }
        };

        private int[] level1WalkableBlocks = new int[] { 1, 11, 12, 13, 14, 15, 21, 22, 43, 44, 65, 6, 16, 66, 176, 131 };

        private int[,] level2 = new int[,]
        {
            {  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 90, 157, 157 },
            { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 90, 157, 157, 157 },
            { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 90, 157, 157, 157, 157 },
            { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 90, 157, 157, 157, 157, 157 },
            { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 90, 157, 157, 157, 157, 157, 157 },
            { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 90, 157, 157, 157, 157, 157, 157, 157 },
            { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 90, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 90, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 90, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 68, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179 },
            { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9 },
            { 92, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 19 },
            { 158, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 109 },
            { 158, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91 },
            { 158, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 90, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 158, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 68, 69, 69, 69, 69, 70, 197, 197, 197, 197, 197, 197, 197, 197, 90, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 158, 197, 197, 197, 197, 197, 197, 90, 91, 91, 91, 91, 91, 92, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 90, 91, 91, 91, 91, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 158, 197, 197, 197, 197, 197, 90, 157, 157, 157, 157, 157, 157, 158, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 156, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 158, 197, 197, 197, 197, 90, 157, 157, 157, 157, 157, 157, 157, 158, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 156, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 157, 91, 91, 91, 91, 157, 157, 157, 157, 157, 157, 157, 157, 157, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
            { 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 }
        };

        private int[] level2WalkableBlocks = new int[] { 7, 17, 18, 87, 88, 197, 9, 19, 109 };

        private int[,] level3 = new int[,]
        {
           { 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, },
           { 136, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10 },
           { 158, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10 },
           { 158, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10 },
           { 158, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10 },
           { 158, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10 },
           { 158, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10 },
           { 158, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 134, 135, 135, 136, 9, 9, 9, 9, 10, 10 },
           { 157, 136, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 134, 157, 157, 157, 157, 136, 9, 9, 9, 10, 10 },
           { 157, 157, 136, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 134, 157, 157, 157, 157, 157, 157, 136, 9, 9, 10, 10 },
           { 157, 157, 158, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 112, 113, 113, 114, 9, 9, 9, 112, 135, 157, 157, 157, 157, 157, 157, 157, 157, 135, 135, 135, 135 },
           { 157, 157, 158, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 156, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
           { 157, 157, 157, 136, 109, 110, 109, 110, 109, 110, 109, 110, 109, 110, 109, 110, 109, 110, 109, 110, 112, 114, 109, 110, 109, 110, 109, 110, 109, 110, 109, 110, 178, 179, 179, 179, 179, 157, 157, 157, 157, 157, 157, 157, 157 },
           { 157, 157, 157, 158, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 178, 157, 157, 157, 157, 157, 157, 157 },
           { 157, 157, 157, 157, 136, 219, 219, 112, 114, 219, 219, 219, 219, 219, 219, 219, 112, 114, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 178, 179, 157, 157, 157, 157, 157 },
           { 157, 179, 179, 179, 180, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 178, 179, 179, 157, 157 },
           { 158, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 134, 135, 136, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 156, 157 },
           { 158, 219, 219, 219, 219, 219, 219, 219, 219, 219, 134, 157, 157, 157, 136, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 156, 157 },
           { 158, 219, 219, 219, 219, 219, 219, 219, 219, 134, 157, 157, 157, 157, 157, 136, 219, 219, 219, 134, 136, 219, 219, 219, 134, 136, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 134, 157, 157 },
           { 157, 91, 91, 135, 135, 135, 135, 135, 135, 157, 157, 157, 157, 157, 157, 157, 135, 135, 135, 157, 157, 135, 135, 135, 157, 157, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 157, 157, 157 },
           { 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
           { 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
           { 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
           { 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 },
           { 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157 }
        };

        private int[] level3WalkableBlocks = new int[] { 9, 19, 20, 109, 110, 219 };

        private int tileSize = 18;
        private int playerHealth = 10;
        private float timer = 0;
        private float musicLoopNumber = 16.5f;
        private List<Sprite> tiles = new List<Sprite>();
        private List<Sprite> levelSprites = new List<Sprite>();

        private Dictionary<LevelType, LevelData> levels = new Dictionary<LevelType, LevelData>();

        private List<Enemy> spawnedEnemies = new List<Enemy>();

        private MyGame game;
        private Player player;

        private LevelType currentLevel = LevelType.Level1;

        public LevelManager(MyGame game)
        {
            this.game = game;
            game.AddChild(this);

            CreateTileMap();

            levels.Add(LevelType.Level1, new LevelData()
            {
                level = level1,
                walkableBlocks = level1WalkableBlocks,
                playerSpawnPosition = new Vec2(50, 190),
                plantSpawnPositions = new Vec2[]
                {
                    new Vec2(435, 283)
                },
                trunkSpawnPositions = new Vec2[]
                {
                    new Vec2(695, 293)
                }
            });

            levels.Add(LevelType.Level2, new LevelData()
            {
                level = level2,
                walkableBlocks = level2WalkableBlocks,
                playerSpawnPosition = new Vec2(30, 280),
                plantSpawnPositions = new Vec2[]
                {
                    new Vec2(425, 300)
                },
                trunkSpawnPositions = new Vec2[]
                {
                    new Vec2(200, 256),
                    new Vec2(700, 203)
                }

            });

            levels.Add(LevelType.Level3, new LevelData()
            {
                level = level3,
                walkableBlocks = level3WalkableBlocks,
                playerSpawnPosition = new Vec2(30, 300),
                plantSpawnPositions = new Vec2[]
                {
                    new Vec2(740, 282),
                    new Vec2(687, 103)
                },
                trunkSpawnPositions = new Vec2[]
                {
                    new Vec2(710, 310),
                    new Vec2(355, 185)
                }
            });
        }

        public void Update()
        {
            BackgroundMusic();

            if(Input.GetKeyDown(Key.ONE))
            {
                ChangeLevel(LevelType.Level1);
            }

            if(Input.GetKeyDown(Key.TWO))
            {
                ChangeLevel(LevelType.Level2);
            }

            if(Input.GetKeyDown(Key.THREE))
            {
                ChangeLevel(LevelType.Level3);
            }
        }

        public void ChangeLevel(LevelType levelType)
        {
            for(int i = 0; i < spawnedEnemies.Count; i++)
            {
                Enemy enemy = spawnedEnemies[i];
                enemy.OnDeathEvent -= OnEnemyDeath;
                game.RemoveChild(enemy);
                enemy.LateDestroy();
            }

            spawnedEnemies.Clear();

            for(int i = 0; i < levelSprites.Count; i++)
            {
                Sprite sprite = levelSprites[i];
                game.RemoveChild(sprite);
                sprite.LateDestroy();
            }

            levelSprites.Clear();

            LevelData levelData = levels[levelType];
            for(int y = 0; y < levelData.level.GetLength(0); y++)
            {
                for(int x = 0; x < levelData.level.GetLength(1); x++)
                {
                    int tileIdx = levelData.level[y, x];
                    Sprite tile = tiles[tileIdx];

                    int tileX = x * tileSize;
                    int tileY = y * tileSize;
                    Sprite sprite = new Sprite(tile.texture.bitmap);

                    if(levelData.walkableBlocks.Contains(tileIdx))
                    {
                        sprite.collider.isTrigger = true;
                    }

                    AddChild(sprite);
                    sprite.SetXY(tileX, tileY);
                    levelSprites.Add(sprite);
                }
            }

            for(int i = 0; i < levelData.plantSpawnPositions.Length; i++)
            {
                Vec2 spawnPosition = levelData.plantSpawnPositions[i];
                SpawnPlantEnemy(spawnPosition);
            }

            for(int i = 0; i < levelData.trunkSpawnPositions.Length; i++)
            {
                Vec2 spawnPosition = levelData.trunkSpawnPositions[i];
                SpawnTrunkEnemy(spawnPosition);
            }

            player.SetXY(levelData.playerSpawnPosition.x, levelData.playerSpawnPosition.y);

            currentLevel = levelType;
        }

        private void CreateTileMap()
        {
            Sprite blankSprite = new Sprite(new Bitmap(tileSize, tileSize));
            tiles.Add(blankSprite);

            Sprite tileMap = new Sprite("assets/GameTileMap.png");
            int numColumns = tileMap.width / tileSize;
            int numRows = tileMap.height / tileSize;

            for(int y = 0; y < numRows; y++)
            {
                for(int x = 0; x < numColumns; x++)
                {
                    Bitmap bitmap = new Bitmap(tileSize, tileSize);

                    for(int j = 0; j < tileSize; j++)
                    {
                        for(int i = 0; i < tileSize; i++)
                        {
                            int spriteX = x * tileSize + i;
                            int spriteY = y * tileSize + j;

                            Color pixel = tileMap.texture.bitmap.GetPixel(spriteX, spriteY);
                            bitmap.SetPixel(i, j, pixel);
                        }
                    }

                    Sprite tile = new Sprite(bitmap);
                    tiles.Add(tile);
                }
            }
        }

        public void SpawnPlayer()
        {
            player = new Player(new Vec2(160, 50), playerHealth);
            game.AddChild(player);

            Camera camera = new Camera(0, 0, game.width, game.height);
            player.AddChild(camera);
        }

        public void SpawnPlantEnemy(Vec2 spawnPosition)
        {
            PlantEnemy plantEnemy = new PlantEnemy(spawnPosition, 3);
            plantEnemy.OnDeathEvent += OnEnemyDeath;
            game.AddChild(plantEnemy);
            spawnedEnemies.Add(plantEnemy);
        }

        public void SpawnTrunkEnemy(Vec2 spawnPosition)
        {
            TrunkEnemy trunkEnemy = new TrunkEnemy(spawnPosition, 4);
            trunkEnemy.OnDeathEvent += OnEnemyDeath;
            game.AddChild(trunkEnemy);
            spawnedEnemies.Add(trunkEnemy);
        }

        private void OnEnemyDeath(Enemy enemy)
        {
            enemy.OnDeathEvent -= OnEnemyDeath;
            spawnedEnemies.Remove(enemy);

            if(spawnedEnemies.Count == 0)
            {
                LevelType nextLevel = currentLevel + 1;
                playerHealth = 10;
                if(nextLevel > LevelType.Level3)
                {
                    Sprite thanksForPlayingSprite = new Sprite("assets/ThanksForPlaying.png");
                    thanksForPlayingSprite.visible = true;
                    thanksForPlayingSprite.collider.isTrigger = true;
                    game.AddChild(thanksForPlayingSprite);
                    return;
                }

                ChangeLevel(nextLevel);
            }
        }

        private void BackgroundMusic()
        {
            float deltaTime = Time.deltaTime / 2000f;
            timer -= deltaTime;

            if (timer <= 0)
            {
                SoundManager.BackGroundMusic.play(0.2f, 0);
                timer = musicLoopNumber;
            }
        }
    }
}
